{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into specific coding style."}, {"role": "user", "content": "Give me a perfect coding style example."}, {"role": "assistant", "content": "/***********************************************************************\n * File: Main.cpp\n * Author: Alex\n * Create Date: 2023/03/17\n * Editor: Brendon\n * Update Date: 2023/03/17\n * Description: This program is to compute and ouput the volume of a sphere with radius r.\n***********************************************************************/\n#define PI 3.1415926\n\n#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\nint main()\n{\n\t// reusable variable ,place this variable outside of the loop\n\tstd::string input;\n\t\n\t// infinite loop until cin meets EOF\n\twhile (true)\n\t{\n\t\t// read input as a string\n\t\tstd::cin >> input;\n\t\t\n\t\t// break the loop if input stream meets EOF\n\t\tif(std::cin.eof())\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t// output the input string ,\n\t\t// but with the indentation if string length is less than 10\n\t\tstd::cout << std::setw(10) << input << \"\n\";\n\t}\n}\n\n// Intent: To calculate the sum of two numbers\n// Pre: Two integer number\n// Post: The function returns the sum of two numbers\nint sum(int a, int b){\n    return a + b;\n}\n/************************************************************************\n * File: main.cpp\n * Author: BO-EN HUANG & YUEH-HSUN WU\n * Create Date: 2023-3-19\n * Editor: BO-EN HUANG & YUEH-HSUN WU\n * Update Date: 2023-3-19\n * Description: Draw and print out the canvas.\n ************************************************************************/\n\n#include <iostream>\n#include <stdio.h>\nusing namespace std;\n\nvoid drawBoard();\t// Function to draw boards\nvoid makeBoard();\t// Function to make board\nvoid modifyBoard(); // Function to modify board\n\nconst int DUNGEN_ROW = 10, DUNGEN_COL = 20;\nchar dungenMap[DUNGEN_ROW][DUNGEN_COL];\n\nchar wall, blank, position; // the symbol of wall, blank, position respectively\nint posX = 0, posY = 0;\t\t// X and Y modifying position respectively\n\nint main(int argc, char **argv)\n{\n\tmakeBoard();\n\tdrawBoard();\n\tmodifyBoard();\n\tdrawBoard();\n}\n\n// Intent: Draw out the whole board\n// Pre: nothing showed\n// Post: show the dungen map on screen\nvoid drawBoard()\n//==================================================================\n{\n\t// Draw out the whole board\n\t/************************************************************************/\n\tfor (int row = 0; row < DUNGEN_ROW; row++)\n\t{\n\t\tfor (int col = 0; col < DUNGEN_COL; col++)\n\t\t{\n\t\t\tcout << dungenMap[row][col];\n\t\t}\n\t\tcout << endl;\n\t}\n\tcout << endl;\n\t/************************************************************************/\n}\n\n// Intent: Enter symbol for wall and blank then create array\n// Pre: symbols of wall and blank are unknown and the dungen map is empty\n// Post: dungen map is filled with symbols of wall and blank\nvoid makeBoard()\n//==================================================================\n{\n\t// Enter symbol for wall and blank then create array\n\t/************************************************************************/\n\tcout << \"Enter symbol for wall: \";\n\tcin >> wall; // get the symbol of wall from user\n\tcout << \"Enter symbol for blank: \";\n\tcin >> blank; // get the symbol of blank from user\n\n\t// create the map\n\tfor (int row = 0; row < DUNGEN_ROW; row++)\n\t{\n\t\tfor (int col = 0; col < DUNGEN_COL; col++)\n\t\t{\n\t\t\tif (row == 0 || row == DUNGEN_ROW - 1 || col == 0 || col == DUNGEN_COL - 1)\n\t\t\t{\n\t\t\t\t// set the board of map to be symbols of wall\n\t\t\t\tdungenMap[row][col] = wall;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// set the inner of map to be filled with symbols of blank\n\t\t\t\tdungenMap[row][col] = blank;\n\t\t\t}\n\t\t}\n\t}\n\n\t/************************************************************************/\n}\n\n// Intent: Modify board given position and char to change\n// Pre: original map is not changed\n// Post: if position of X and Y is valid, substitute symbol of position for given position in map\nvoid modifyBoard()\n//==================================================================\n{\n\t// Function for modifying board given position and char to change\n\t/************************************************************************/\n\tcout << \"Enter symbol for modifying position: \";\n\tcin >> position; // get the symbol of position from user\n\tcout << \"Enter X of modifying position: \";\n\tcin >> posX; // get position of X from user\n\tcout << \"Enter Y of modifying position: \";\n\tcin >> posY; // get position of Y from user\n\n\t/* if the position of X or Y is beyond the board, show message \"Invalid input\",\n\totherwise, set the X,Y position in map to be symbol of position*/\n\tif (posX < 0 || posY > DUNGEN_ROW - 1 || posY < 0 || posX > DUNGEN_COL - 1)\n\t{\n\t\tcout << \"Invalid input\" << endl;\n\t}\n\telse\n\t{\n\t\tdungenMap[posY][posX] = position;\n\t}\n\t/************************************************************************/\n}"}]}{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "Give me the header format"}, {"role": "assistant", "content": "/***********************************************************************\n* File: Main.cpp\n* Author: Alex\n* Create Date: 2023/03/17\n* Editor: Brendon\n* Update Date: 2023/03/17\n* Description: This program is to compute and ouput the volume of a sphere with radius r.\n***********************************************************************/"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "// Wrong 1, No space between two logical sections.\nif(...){\n\n}\nif(...){\n\n}\n\n// Wrong 2, Having a space between one logical section.\nif(...){\n\n}\n\nelse if(...){\n\n}\n\n// Wrong 3, Redundant spaces in your code.\nint main(){\n\n\n\nstd::cout<<\"Hello World!\"<<std::endl;\n\n\n\n\n\n}\n\n// Wrong 4, No space between loop and variable define sections.\nint main(){\nfloat input;\nwhile(...){\n///....\n}\n}\n\n// Wrong 5, No space between loop and output sections.\nint main(){\nwhile(...){\n///....\n}\ncout<<\"Hello World!\"<<endl;\n}\n\n// Wrong 6, Having a meaningless space between two for loops.\nfor (int i = 0; i < DUNGEN_ROW; ++i)\n{\n\nfor (int o = 0; o < DUNGEN_COL; ++o)\n{\nputchar(dungenMap[i][o]);\n}\n\nputchar('\\n');\n}"}, {"role": "assistant", "content": "Use blank lines to separate logical sections\n#define PI 3.1415926535\n\n#include<iostream>\n#include<cmath>\n\nusing namespace std;\n\nint main(){\n// Define a variable that is used to save input value.\nfloat input;\n\nwhile(1){\n//...\n}\n}"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "// Wrong 1\ndouble input=0,ouput=0;\n\n// Wrong 2\nif(input==1&&ouput==0){\n\n}"}, {"role": "assistant", "content": "Use spaces around '=' and around operators and after commas and semicolons.\ndouble input = 0, ouput = 0;\n\nif(input == 1 && ouput == 0){\n\n}"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "// Wrong 1, comment is not clear\n#include <iostream>\n#include <vector>\n#include <iomanip>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\nint main()\n{\nint numOfEmploy;\n\nwhile (cin >> numOfEmploy)\n{\nstring names;\nlong long salary;\nlong long award;\nint maxLengthName, maxLengthSalary, maxLengthAward;\nvector <string> name;\nvector <long long> money;\nvector <long long> reward;\n\nfor (int a = 0; a < numOfEmploy; a++)\n{\ncin >> names; // Alexandrescu\nname.push_back(names);\n\ncin >> salary; // 200000000\nmoney.push_back(salary);\n\ncin >> award; // 99999\nreward.push_back(award);\n}\n\n//  int zero = 0;\nmaxLengthName = name[0].length();\n\nfor (int b = 1; b < numOfEmploy; b++)\n{\nif (maxLengthName < name[b].length())\n{\nmaxLengthName = name[b].length();\n}\n}\n\nmaxLengthSalary = *max_element(money.begin(), money.end());\nmaxLengthSalary = to_string(maxLengthSalary).length();\n\nmaxLengthAward = *max_element(reward.begin(), reward.end());\nmaxLengthAward = to_string(maxLengthAward).length();\n\nfor (int c = 0; c < numOfEmploy; c++)\n{\ncout << setw(maxLengthName) << name[c];\ncout << \"|\" << \"  \" << setw(maxLengthSalary) << money[c];\ncout << \"|\" << \"  \" << setw(maxLengthAward) << reward[c] << endl;\n}\n\n}\n}"}, {"role": "assistant", "content": "Use comments to describe major sections of program or where something needs to be clarified.\n// Name: XXX\n// Date: March 8, 2023\n// Last Update: March 8, 2023\n// Problem statement: This C++ program read an input , and output the input // with indentation if string length of input is less than 10.\n\n#include <iostream>\n#include <iomanip>\n\nint main()\n{\n// reusable variable ,place this variable outside of the loop\nstd::string input;\n\n// infinite loop until cin meets EOF\nwhile (true)\n{\n// read input as a string\nstd::cin >> input;\n\n// break the loop if input stream meets EOF\nif(std::cin.eof())\n{\nbreak;\n}\n\n// output the input string ,\n// but with the indentation if string length is less than 10\nstd::cout << std::setw(10) << input << \"\\n\";\n}\n}"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "// Variable name is meaningless\nint i;\nint a;\nint b;\n// Different coding styles\nint Input = 1;\nint input_number = 0;\nint InputCarNumber = 3;"}, {"role": "assistant", "content": "For names of objects (variables) you will use lower case letters and capitalize the first letter of the second and succeeding words.\nint input = 1;\nint inputNumber = 0;\nint inputCarNumber = 3;"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "const double pi = 3.1415926535;\nenum key{\nup,\ndown,\nleft,\nright\n};\nenum common_color{\nred,\ngreen,\nblue\n};"}, {"role": "assistant", "content": "For constants (including enumeration values), the identifier should be all capital letters (uppercase) using underscore to separate words.\nconst double PI = 3.1415926535;\nenum KEY{\nUP,\nDOWN,\nLEFT,\nRIGHT\n};\nenum COMMON_COLOR{\nRED,\nGREEN,\nBLUE\n};"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "class dog\n{\n\n};\nclass national_taiwan_university\n{\n\n};"}, {"role": "assistant", "content": "The names of classes should start with an upper case letter.\nclass Dog\n{\n\n};\nclass NationalTaiwanUniversity\n{\n\n};"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "// print a 99 multiplication\nint a = 9; // What is a?\nint b[9][9]; // How does b do?\n\nfor (int i = 0; i < a; i++)\n{\nfor (int j = 0; j < a; j++)\n{\nb[i][j] = i * j;\ncin >> i >> \" X \" >> j >> \" = \" >> b[i][j] >> endl;\n}\n}"}, {"role": "assistant", "content": "Use descriptive object and class names which relate the program to the problem.\n// print a 99 multiplication\nint num = 9;\nint table[9][9];\n\nfor (int i = 0; i < num; i++) // only allow use i, j, k in for loop\n{\nfor (int j = 0; j < num; j++)\n{\ntable[i][j] = i * j;\ncin >> i >> \" X \" >> j >> \" = \" >> table[i][j] >> endl;\n}\n}"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "mew.h, mew.cpp"}, {"role": "assistant", "content": "A class should be declared in a header file and defined in a source file where the name of the files match the name of the class.\nCat.h, Cat.cpp"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "Indent if, for and do-while format."}, {"role": "assistant", "content": "if()\n{\nif()\n{\n....\n}\n}\n\nif(){\nif(){\n....\n}\n}\n\nfor()\n{\nfor()\n{\n....\n}\n}\n\nfor(){\nfor(){\n....\n}\n}\n\ndo{\nif(){\n....\n}\n}while();\n\ndo\n{\nif()\n{\n....\n}\n}while();"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "// Wrong 1, put function description in wrong place\ndouble getVolume(double radius)\n{\n// Intent: To calculate the volume of a sphere with a given radius\n// Pre: The variable radius must have a value and radius > 0.\n// Post: The function returns tthe volume of a sphere.\n\n//declare variables which are needed\nconst double PI = 3.14159265358979323846;\ndouble volume;\n\n//derived value of sphere volume\n//formula: 4/3 * pi * r^3\nvolume = (4.0 / 3.0) * PI * radius * radius * radius;\n\nreturn volume;\n}"}, {"role": "assistant", "content": "All functions must have a series of comments which state the intent and the pre and post conditions. A pre-condition is a sentence or two which states what must be true before the function is called. The post-condition states what is true after the function is called.\n// Intent: To calculate the volume of a sphere with a given radius\n// Pre: The variable radius must have a value and radius > 0.\n// Post: The function returns tthe volume of a sphere.\ndouble getVolume(double radius)\n{\n//declare variables which are needed\nconst double PI = 3.14159265358979323846;\ndouble volume;\n\n//derived value of sphere volume\n//formula: 4/3 * pi * r^3\nvolume = (4.0 / 3.0) * PI * radius * radius * radius;\n\nreturn volume;\n}"}]}
{"messages": [{"role": "system", "content": "You are a coding-style master good at formatting codes into one specific coding style."}, {"role": "user", "content": "class Cat\n{\n\n};"}, {"role": "assistant", "content": "Header files must contain an include guard\n1.\n#ifndef _CAT_H_\n#define _CAT_H_\nclass Cat\n{\n\n};\n#endif // _CAT_H_\n2.\n#pragma once\nclass Cat\n{\n\n};"}]}
